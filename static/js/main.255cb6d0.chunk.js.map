{"version":3,"sources":["components/Profile/Profile.styled.js","components/Profile/Profile.js","helpers/randomColorGenerator.js","components/Statistics/Statistics.styled.js","components/Statistics/Statistics.js","components/FriendListItem/FriendListItem.styled.js","components/FriendListItem/FriendListItem.js","components/FriendsList/FriendsList.styled.js","components/FriendsList/FriendsList.js","components/TransactionHistory/TransactionHistory.styled.js","components/TransactionHistory/TransactionHistory.js","components/App/App.js","index.js"],"names":["ProfileContainer","styled","div","DescriptionContainer","AvatarImage","img","Name","p","NameTag","Location","StatsList","ul","StatsListItem","li","LabelItem","span","QuantityItem","Profile","name","tag","location","avatar","stats","followers","views","likes","src","alt","randomColorGenerator","Math","floor","random","StatisticsSection","section","StatisticsTitle","h2","StatisticsList","StatisticsListItem","PercentageItem","Statistics","title","map","id","label","percentage","key","style","backgroundColor","defaultProps","ListItem","ItemStatus","props","isOnline","ItemAvatar","ItemName","FriendListItem","FriendsList","friends","item","TransactionTable","table","TransactionHead","thead","RowContainer","tr","CellHeadContainer","th","TransactionBody","tbody","CellBodyContainer","td","cellHeadItems","TransactionHistory","items","type","amount","currency","App","user","statisticalData","transactions","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.255cb6d0.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const ProfileContainer = styled.div`\n  width: 250px;\n  margin: 0 auto;\n  font-size: 14px;\n  line-height: 32px;\n  font-family: 'Lato', sans-serif;\n  font-weight: 400;\n  background-color: rgb(231, 236, 242);\n  color: rgb(118, 134, 150);\n  border-radius: 4px;\n  box-shadow: 0px 1px 3px 0px rgba(191, 205, 222, 0.75);\n`;\n\nexport const DescriptionContainer = styled.div`\n  padding-top: 30px;\n  padding-bottom: 25px;\n  text-align: center;\n  background-color: rgb(255, 255, 255);\n`;\n\nexport const AvatarImage = styled.img`\n  display: block;\n  max-width: 100%;\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  margin: 0 auto 24px;\n`;\n\nexport const Name = styled.p`\n  margin: 0;\n  font-family: 'Lato', sans-serif;\n  font-size: 18px;\n  font-weight: 600;\n  color: rgb(18, 34, 54);\n`;\n\nexport const NameTag = styled.p`\n  margin: 0;\n`;\n\nexport const Location = styled.p`\n  margin: 0;\n`;\n\nexport const StatsList = styled.ul`\n  display: flex;\n  justify-content: space-between;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const StatsListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  flex-basis: 33.33333%;\n  padding: 18px 15px 20px 15px;\n  text-align: center;\n  background-color: rgb(243, 246, 249);\n  border-top: 1px solid rgb(228, 233, 240);\n\n  :not(:last-child) {\n    border-right: 1px solid rgb(228, 233, 240);\n  }\n`;\n\nexport const LabelItem = styled.span`\n  margin-bottom: 10px;\n  font-size: 12px;\n  line-height: 1.2;\n`;\n\nexport const QuantityItem = styled.span`\n  font-family: 'Lato', sans-serif;\n  font-weight: 900;\n  line-height: 1.2;\n  color: rgb(31, 51, 73);\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ProfileContainer,\n  DescriptionContainer,\n  AvatarImage,\n  Name,\n  NameTag,\n  Location,\n  StatsList,\n  StatsListItem,\n  LabelItem,\n  QuantityItem,\n} from './Profile.styled';\n\nconst Profile = ({\n  name,\n  tag,\n  location,\n  avatar,\n  stats: { followers, views, likes },\n}) => (\n  <ProfileContainer>\n    <DescriptionContainer>\n      <AvatarImage src={avatar} alt=\"user avatar\" />\n      <Name>{name}</Name>\n      <NameTag>@{tag}</NameTag>\n      <Location>{location}</Location>\n    </DescriptionContainer>\n    <StatsList>\n      <StatsListItem>\n        <LabelItem>Followers</LabelItem>\n        <QuantityItem>{followers}</QuantityItem>\n      </StatsListItem>\n      <StatsListItem>\n        <LabelItem>Views</LabelItem>\n        <QuantityItem>{views}</QuantityItem>\n      </StatsListItem>\n      <StatsListItem>\n        <LabelItem>Likes</LabelItem>\n        <QuantityItem>{likes}</QuantityItem>\n      </StatsListItem>\n    </StatsList>\n  </ProfileContainer>\n);\n\nProfile.propTypes = {\n  name: PropTypes.string.isRequired,\n  tag: PropTypes.string.isRequired,\n  location: PropTypes.string.isRequired,\n  avatar: PropTypes.string.isRequired,\n  stats: PropTypes.shape({\n    followers: PropTypes.number.isRequired,\n    views: PropTypes.number.isRequired,\n    likes: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default Profile;\n","const randomColorGenerator = () =>\n  `rgb(${Math.floor(Math.random() * 256)},${Math.floor(\n    Math.random() * 256,\n  )},${Math.floor(Math.random() * 256)})`;\n\nexport default randomColorGenerator;\n","import styled from 'styled-components';\n\nexport const StatisticsSection = styled.section`\n  width: 270px;\n  margin: 0 auto;\n  padding: 50px 0;\n  font-family: 'Lato';\n  font-weight: 400;\n  line-height: 1.2;\n  border-radius: 2px;\n  box-shadow: 0px 2px 2px 0px rgba(2, 2, 2, 0.02);\n`;\n\nexport const StatisticsTitle = styled.h2`\n  margin: 0;\n  padding: 30px 10px;\n  font-size: 16px;\n  font-weight: 600;\n  color: rgb(71, 89, 101);\n  background-color: rgb(255, 255, 255);\n  text-align: center;\n  text-transform: uppercase;\n`;\n\nexport const StatisticsList = styled.ul`\n  display: flex;\n  justify-content: space-between;\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const StatisticsListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  flex-basis: 20%;\n  padding: 6px 0;\n  text-align: center;\n  color: rgb(255, 255, 255);\n`;\n\nexport const LabelItem = styled.span`\n  font-size: 12px;\n  line-height: 1.6;\n  font-weight: 300;\n`;\n\nexport const PercentageItem = styled.span`\n  font-size: 18px;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport randomColorGenerator from '../../helpers/randomColorGenerator';\nimport {\n  StatisticsSection,\n  StatisticsTitle,\n  StatisticsList,\n  StatisticsListItem,\n  LabelItem,\n  PercentageItem,\n} from './Statistics.styled';\n\nconst Statistics = ({ title, stats }) => (\n  <StatisticsSection>\n    {title && <StatisticsTitle>{title}</StatisticsTitle>}\n    <StatisticsList>\n      {stats.map(({ id, label, percentage }) => (\n        <StatisticsListItem\n          key={id}\n          style={{\n            backgroundColor: randomColorGenerator(),\n          }}\n        >\n          <LabelItem>{label}</LabelItem>\n          <PercentageItem>{percentage}%</PercentageItem>\n        </StatisticsListItem>\n      ))}\n    </StatisticsList>\n  </StatisticsSection>\n);\n\nStatistics.defaultProps = {\n  title: '',\n};\n\nStatistics.propTypes = {\n  title: PropTypes.string,\n  stats: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      percentage: PropTypes.number.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default Statistics;\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li`\n  display: flex;\n  width: 400px;\n  padding: 10px;\n  background-color: rgb(255, 255, 255);\n  box-shadow: 0px 3px 10px 6px rgba(0, 0, 0, 0.75);\n\n  :not(:last-child) {\n    margin-bottom: 15px;\n  }\n`;\n\nexport const ItemStatus = styled.span`\n  align-self: center;\n  margin-right: 15px;\n  width: 20px;\n  height: 20px;\n  background-color: ${props =>\n    props.isOnline ? 'rgb(0, 207, 0)' : 'rgb(218, 0, 0)'};\n  border-radius: 50%;\n`;\n\nexport const ItemAvatar = styled.img`\n  display: block;\n  max-width: 100%;\n  width: 100px;\n  height: 100px;\n  margin-right: 15px;\n  border-radius: 10px;\n`;\n\nexport const ItemName = styled.p`\n  align-self: center;\n  margin: 0;\n  font-family: 'Lato', sans-serif;\n  font-size: 20px;\n  font-weight: 700;\n  line-height: 1.2;\n  vertical-align: middle;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  ListItem,\n  ItemStatus,\n  ItemAvatar,\n  ItemName,\n} from './FriendListItem.styled';\n\nconst FriendListItem = ({ avatar, name, isOnline }) => (\n  <ListItem>\n    <ItemStatus isOnline={isOnline} />\n    <ItemAvatar src={avatar} alt=\"avatar-image\" />\n    <ItemName>{name}</ItemName>\n  </ListItem>\n);\n\nFriendListItem.propTypes = {\n  avatar: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  isOnline: PropTypes.bool.isRequired,\n};\n\nexport default FriendListItem;\n","import styled from 'styled-components';\n\nexport default styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 0;\n  padding: 0 0 50px 0;\n  list-style: none;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport FriendListItem from '../FriendListItem/FriendListItem';\nimport List from './FriendsList.styled';\n\nconst FriendsList = ({ friends }) => (\n  <List>\n    {friends.map(item => (\n      <FriendListItem key={item.id} {...item} />\n    ))}\n  </List>\n);\n\nFriendsList.propTypes = {\n  friends: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.number.isRequired }),\n  ).isRequired,\n};\n\nexport default FriendsList;\n","import styled from 'styled-components';\n\nexport const TransactionTable = styled.table`\n  width: 875px;\n  margin: 0 auto;\n  font-family: 'Lato', sans-serif;\n  font-weight: 400;\n  background-color: rgb(255, 255, 255);\n  border-collapse: collapse;\n  box-shadow: 0px 3px 10px 6px rgba(0, 0, 0, 0.75);\n`;\n\nexport const TransactionHead = styled.thead`\n  font-size: 13px;\n  line-height: 2.308;\n  font-weight: 700;\n  letter-spacing: 1px;\n  background-color: rgb(0, 188, 212);\n  color: rgb(255, 255, 255);\n  text-transform: uppercase;\n`;\n\nexport const RowContainer = styled.tr`\n  :nth-child(even) {\n    background-color: rgb(236, 242, 243);\n  }\n`;\n\nexport const CellHeadContainer = styled.th`\n  padding: 15px 0 10px;\n\n  :not(:last-child) {\n    border-right: 2px solid rgb(224, 230, 231);\n  }\n`;\n\nexport const TransactionBody = styled.tbody`\n  font-size: 15px;\n  line-height: 2;\n  font-weight: 300;\n  color: rgb(92, 105, 117);\n  text-align: center;\n  text-transform: capitalize;\n`;\n\nexport const CellBodyContainer = styled.td`\n  padding: 15px 0 10px;\n\n  :not(:last-child) {\n    border-right: 2px solid rgb(224, 230, 231);\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  TransactionTable,\n  TransactionHead,\n  TransactionBody,\n  RowContainer,\n  CellHeadContainer,\n  CellBodyContainer,\n} from './TransactionHistory.styled';\n\nconst cellHeadItems = ['Type', 'Amount', 'Currency'];\n\nconst TransactionHistory = ({ items }) => (\n  <TransactionTable>\n    <TransactionHead>\n      <RowContainer>\n        {cellHeadItems.map(item => (\n          <CellHeadContainer key={item}>{item}</CellHeadContainer>\n        ))}\n      </RowContainer>\n    </TransactionHead>\n    <TransactionBody>\n      {items.map(({ id, type, amount, currency }) => (\n        <RowContainer key={id}>\n          <CellBodyContainer>{type}</CellBodyContainer>\n          <CellBodyContainer>{amount}</CellBodyContainer>\n          <CellBodyContainer>{currency}</CellBodyContainer>\n        </RowContainer>\n      ))}\n    </TransactionBody>\n  </TransactionTable>\n);\n\nTransactionHistory.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.string.isRequired,\n      currency: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","import React from 'react';\nimport Profile from '../Profile/Profile';\nimport Statistics from '../Statistics/Statistics';\nimport FriendsList from '../FriendsList/FriendsList';\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\nimport user from '../../database/user.json';\nimport statisticalData from '../../database/statistical-data.json';\nimport friends from '../../database/friends.json';\nimport transactions from '../../database/transactions.json';\nimport './App.css';\n\nconst App = () => (\n  <>\n    <Profile\n      name={user.name}\n      tag={user.tag}\n      location={user.location}\n      avatar={user.avatar}\n      stats={user.stats}\n    />\n    <Statistics title=\"Upload stats\" stats={statisticalData} />\n    <FriendsList friends={friends} />\n    <TransactionHistory items={transactions} />\n  </>\n);\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}